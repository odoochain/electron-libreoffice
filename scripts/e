#!/bin/bash

set -e

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE:-$0}")" &> /dev/null && pwd)
BASE_PATH="$(dirname -- "$SCRIPT_DIR")"
DEPOT_TOOLS_PATH="$BASE_PATH/depot_tools"
BUILD_TOOLS_PATH="$BASE_PATH/build-tools"

export PATH="$DEPOT_TOOLS_PATH:$SCRIPT_DIR:$PATH"
export CHROMIUM_BUILDTOOLS_PATH="$BASE_PATH/src/buildtools"
export ELECTRON_OUT_DIR=Default
export ELECTRON_ENABLE_STACK_DUMPING=1
export ELECTRON_ALSO_LOG_TO_STDERR=1
export DEPOT_TOOLS_WIN_TOOLCHAIN=0

# cache git requests only if not in CI, where they are abandoned
if [ -z "$CI" ]; then
  export GIT_CACHE_PATH="$BASE_PATH/.git-cache"
fi

if [ ! -d "$DEPOT_TOOLS_PATH" ]; then
  fetch-depot-tools.sh
  # update_depot_tools
fi
if [ ! -d "$BUILD_TOOLS_PATH" ]; then
  fetch-electron-build-tools.sh

  # Fix non-super user check for goma.ipc
  patch -N -d "$BUILD_TOOLS_PATH/third_party/goma" -i "$SCRIPT_DIR/goma_ctl_fix.patch"
fi

GN_CONFIG=//electron/build/args/testing.gn
GN_GOMA_FILE="$BUILD_TOOLS_PATH/third_party/goma.gn"

IS_RELEASE="${IS_RELEASE:-false}"
IS_DEBUG="${IS_DEBUG:-true}"
INJECT_TO="${INJECT_TO:-false}"
INJECT_TO="${INJECT_TO/#\~/$HOME}" # fix home dir paths
FOR_APPLE_SILICON="${FOR_APPLE_SILICON:-false}"

if [ "$IS_RELEASE" = "true" ]; then
  echo "Preparing release build"
  export GN_CONFIG=//electron/build/args/release.gn
  export STRIP_BINARIES=true
  export GENERATE_SYMBOLS=true
  # export CHECK_DIST_MANIFEST=1
elif [ "$IS_DEBUG" = "true" ]; then
  echo "Preparing debug build"
  export GN_CONFIG=//electron/build/args/debug.gn
fi

# The GH runners are x64 only, so we will need to cross compile
if [ "$FOR_APPLE_SILICON" = "true" ]; then
  echo "Cross-compiling for Apple Silicon"
  export TARGET_ARCH=arm64
  GN_EXTRA_ARGS='target_cpu = "arm64" use_prebuilt_v8_context_snapshot = true'
  export USE_PREBUILT_V8_CONTEXT_SNAPSHOT=1
  export npm_config_arch=arm64
  export GENERATE_CROSS_ARCH_SNAPSHOT=true
  sed -i 's/"custom_vars": {}/"custom_vars": {"checkout_arm": True, "checkout_arm64": True}/g' "$BASE_PATH/.gclient"
fi

# probably doesn't need to be updated, really
export DEPOT_TOOLS_UPDATE=0

case "$(uname)" in
  MINGW*|MSYS*)
    OS="win"
    GN_GOMA_FILE="$(cygpath -m "$GN_GOMA_FILE")"
    ;;
  Darwin*)
    OS="mac"
    ;;
  Linux*|WSL*)
    OS="linux"
    ;;
  *)
    >&2 echo "unknown operating system: $(uname)"
    exit 1
    ;;
esac

prepare_for_build() {
  # Use goma
  export NUMBER_OF_NINJA_PROCESSES=${2:-200}
  export GOMA_START_COMPILER_PROXY=true
  goma.sh start
  OUT_DIR="${OUT_DIR:-"out/$ELECTRON_OUT_DIR"}"

  # Build electron
  cd "$BASE_PATH/src"
  echo "$GN_CONFIG"
  if [ "$RUN_GN_ONCE" != "true" ] || [ ! -f "$OUT_DIR/.gn_ran" ]; then
    echo gn gen "$OUT_DIR" --args="import(\"$GN_CONFIG\") import(\"$GN_GOMA_FILE\") $GN_EXTRA_ARGS $GN_BUILDFLAG_ARGS"
    gn gen "$OUT_DIR" --args="import(\"$GN_CONFIG\") import(\"$GN_GOMA_FILE\") $GN_EXTRA_ARGS $GN_BUILDFLAG_ARGS"
    if [ "$RUN_GN_ONCE" = "true" ]; then touch "$OUT_DIR/.gn_ran"; fi
  fi
}

echo "Running $1 for $OS"

case "$1" in
  sync)
    cd "$BASE_PATH"
    # Move misbehaving git files to their proper places, temporarily
    mv src/.git{.bak,} || true
    mv src/.gitignore{.bak,} || true
    ELECTRON_USE_THREE_WAY_MERGE_FOR_PATCHES=1 gclient sync --no-history --with_branch_heads --with_tags -v -v "${@:2}"
    # Move misbehaving git files out of the way
    mv src/.git{,.bak} || true
    mv src/.gitignore{,.bak} || true
    ;;
  build)
    # Mostly pulled from src/electron/.circleci/config/base.yml -- MIT LICENSE Copyright (c) Electron contributors Copyright (c) 2013-2020 GitHub Inc.
    prepare_for_build "$@"

    if [ "$UPDATE_LOK" = "true" ]; then rm -rf "$OUT_DIR/libreofficekit"; fi
    autoninja -C out/Default electron -j "$NUMBER_OF_NINJA_PROCESSES"
    cp out/Default/.ninja_log out/electron_ninja_log
    node electron/script/check-symlinks.js

    # Finish if not doing a full release
    if [ "$IS_RELEASE" != "true" ] && [ "$INJECT_TO" = "false" ]; then
      echo "Not release, finishing"
      exit 0
    fi

    if [ "$INJECT_TO" != "false" ] && [ ! -d "$INJECT_TO" ]; then
      echo "INJECT_TO directory does not exist";
    fi

    # Dist strip
    if [ "$STRIP_BINARIES" = "true" ] && [ "$OS" = "linux" ]; then
      TARGET_CPU="${TARGET_ARCH:-x64}"
      electron/script/copy-debug-symbols.py --target-cpu="$TARGET_CPU" --out-dir=out/Default/debug --compress
      electron/script/strip-binaries.py --target-cpu="$TARGET_CPU"
      electron/script/add-debug-link.py --target-cpu="$TARGET_CPU" --debug-dir=out/Default/debug
    fi

    # Make dist
    ninja -C out/Default electron:electron_dist_zip

    # mksnapshot
    if [ "$USE_PREBUILT_V8_CONTEXT_SNAPSHOT" = "1" ]; then
      ninja -C out/Default electron:electron_mksnapshot_zip -j "$NUMBER_OF_NINJA_PROCESSES"
      ninja -C out/Default tools/v8_context_snapshot -j "$NUMBER_OF_NINJA_PROCESSES"
      gn desc out/Default v8:run_mksnapshot_default args > out/Default/mksnapshot_args
      (cd out/Default; zip mksnapshot.zip mksnapshot_args clang_x64_v8_arm64/gen/v8/embedded.S)
      rm -rf out/Default/clang_x64_v8_arm64/gen
      rm -rf out/Default/clang_x64_v8_arm64/obj
      rm -rf out/Default/clang_x64_v8_arm64/thinlto-cache
      rm -rf out/Default/clang_x64/obj
      gn gen out/Default --args="import(\"$GN_CONFIG\") import(\"$GN_GOMA_FILE\") $GN_EXTRA_ARGS $GN_BUILDFLAG_ARGS"
    elif [ "$OS" = "win" ]; then
        gn desc out/Default v8:run_mksnapshot_default args > out/Default/mksnapshot_args
        ninja -C out/Default electron:electron_mksnapshot_zip
        if [ "$INJECT_TO" = "false" ]; then
            (cd out/Default; 7z a mksnapshot.zip mksnapshot_args gen/v8/embedded.S)
        fi
    else
      ninja -C out/Default electron:electron_mksnapshot -j "$NUMBER_OF_NINJA_PROCESSES"
      gn desc out/Default v8:run_mksnapshot_default args > out/Default/mksnapshot_args
      if [ "$OS" = "linux" ]; then
        electron/script/strip-binaries.py --file "$PWD/out/Default/mksnapshot"
        electron/script/strip-binaries.py --file "$PWD/out/Default/v8_context_snapshot_generator"
      fi
      ninja -C out/Default electron:electron_mksnapshot_zip -j "$NUMBER_OF_NINJA_PROCESSES"
      (cd out/Default; zip mksnapshot.zip mksnapshot_args gen/v8/embedded.S)
    fi

    if [ "$INJECT_TO" != "false" ] && [ -d "$INJECT_TO" ]; then
      (cd out/Default; cp dist.zip mksnapshot.zip mksnapshot_args gen/v8/embedded.S "$INJECT_TO");
      echo "Injected build into '$INJECT_TO'"
    fi

    if [ "$IS_RELEASE" != "true" ]; then
      echo "Not release, finishing"
      exit 0
    fi

    # cross compile snapshot for Apple Silicon
    if [ "$GENERATE_CROSS_ARCH_SNAPSHOT" = "true" ]; then
      if [ "$TARGET_ARCH" = "arm" ]; then
        export MKSNAPSHOT_PATH="clang_x86_v8_arm"
      elif [ "$TARGET_ARCH" = "arm64" ]; then
        export MKSNAPSHOT_PATH="clang_x64_v8_arm64"
      fi
      cp "out/Default/$MKSNAPSHOT_PATH/mksnapshot" out/Default
      cp "out/Default/$MKSNAPSHOT_PATH/v8_context_snapshot_generator" out/Default
      if [ "$OS" = "linux" ]; then
        cp "out/Default/$MKSNAPSHOT_PATH/libffmpeg.so" out/Default
      elif [ "$OS" = "mac" ]; then
        cp "out/Default/$MKSNAPSHOT_PATH/libffmpeg.dylib" out/Default
      fi
      python3 electron/script/verify-mksnapshot.py --source-root "$PWD" --build-dir out/Default --create-snapshot-only
      mkdir cross-arch-snapshots
      cp out/Default-mksnapshot-test/*.bin cross-arch-snapshots
    fi

    if [ "$OS" = "win" ]; then
      python3 electron/build/profile_toolchain.py --output-json=out/Default/windows_toolchain_profile.json
    fi

    # Generate Node.js headers
    ninja -C out/Default third_party/electron_node:headers

    # hunspell
    ninja -C out/Default electron:hunspell_dictionaries_zip -j "$NUMBER_OF_NINJA_PROCESSES"

    # libcxx
    if [ "$OS" = "linux" ]; then
      ninja -C out/Default electron:libcxx_headers_zip -j "$NUMBER_OF_NINJA_PROCESSES"
      ninja -C out/Default electron:libcxxabi_headers_zip -j "$NUMBER_OF_NINJA_PROCESSES"
      ninja -C out/Default electron:libcxx_objects_zip -j "$NUMBER_OF_NINJA_PROCESSES"
    fi

    # Generate breakpad symbols
    if [ "$GENERATE_SYMBOLS" = "true" ]; then
      ninja -C out/Default electron:electron_symbols

      # Zip symbols
      export BUILD_PATH="$PWD/out/Default"
      ninja -C out/Default electron:licenses
      ninja -C out/Default electron:electron_version
      DELETE_DSYMS_AFTER_ZIP=1 python3 electron/script/zip-symbols.py -b "$BUILD_PATH"
    fi

    # Build chromedriver
    if [ "$TARGET_ARCH" = "arm" ] || [ "$TARGET_ARCH" = "arm64" ]; then
      gn gen out/chromedriver --args="import(\"$GN_CONFIG\") import(\"$GN_GOMA_FILE\") is_component_ffmpeg=false proprietary_codecs=false $GN_EXTRA_ARGS $GN_BUILDFLAG_ARGS"
      export CHROMEDRIVER_DIR="out/chromedriver"
    else
      export CHROMEDRIVER_DIR="out/Default"
    fi
    ninja -C $CHROMEDRIVER_DIR electron:electron_chromedriver -j "$NUMBER_OF_NINJA_PROCESSES"
    if [ "$OS" = "linux" ]; then
      python3 electron/script/strip-binaries.py --target-cpu="$TARGET_ARCH" --file "$PWD/$CHROMEDRIVER_DIR/chromedriver"
    fi
    ninja -C $CHROMEDRIVER_DIR electron:electron_chromedriver_zip
    if [ "$TARGET_ARCH" = "arm" ] || [ "$TARGET_ARCH" = "arm64" ]; then
      cp out/chromedriver/chromedriver.zip out/Default
    fi

    # only create TS definitions when not in CI or in Linux on CI
    if [ -n "$CI" ] || [ "$OS" = "linux" ]; then
      # Build typescript defs
      (cd -- electron && node script/yarn create-typescript-definitions)

      # Prepare and mark files for upload in CI
      (cd -- electron && python3 script/release/uploaders/upload.py --verbose)
    fi

    goma.sh stop
    ;;
  d)
    "$2" "${@:3}"
    ;;
  run)
    OUT_DIR="out/$ELECTRON_OUT_DIR"
    LAST_RUN_STAMP="$BASE_PATH/.last_run_stamp"
    export RUN_GN_ONCE="${RUN_GN_ONCE:true}"

    # Only build if there are changes to src/electron since the last successful build
    if [ -e "$LAST_RUN_STAMP" ] && \
      find "$BASE_PATH/src/electron" -newer "$LAST_RUN_STAMP" -exec false {} + && \
      find "$BASE_PATH/src/third_party/libreofficekit/instdir" -newer "$LAST_RUN_STAMP" -exec false {} +
    then
      echo "No changes since last build"
    else
      if scripts/e build; then
        touch "$LAST_RUN_STAMP"
      else
        exit 1
      fi
    fi
    if [ "$OS" = "win" ]; then
      EXE_SUFFIX=".exe"
    fi
    if [ "$OS" = "mac" ]; then
      MAC_SUFFIX=".app/Contents/MacOS/Electron"
    fi

    # By default, open the QA file
    ARGS=("qa/shell.js")
    if [ ${#@} -gt 1 ]; then
      ARGS=("${@:2}")
    fi
    "$BASE_PATH/src/$OUT_DIR/electron$MAC_SUFFIX$EXE_SUFFIX" "${ARGS[@]}"
    ;;
  gen_clangd)
    OUT_DIR="out/$ELECTRON_OUT_DIR"
    cd "$BASE_PATH"
    echo "Building so that buildflag headers exist"
    scripts/e build
    "$BASE_PATH/src/tools/clang/scripts/generate_compdb.py" -p "src/$OUT_DIR" > "$BASE_PATH/src/compile_commands.json"
    ;;
  gen_vs)
    cd "$BASE_PATH/src"
    OUT_DIR="out/$ELECTRON_OUT_DIR"
    gn gen "$OUT_DIR" --args="import(\"$GN_CONFIG\") import(\"$GN_GOMA_FILE\") $GN_EXTRA_ARGS $GN_BUILDFLAG_ARGS" --ide=vs --filters="//chrome;//electron" --no-deps
    ;;
  vs_devenv)
    # It's safe to assume that if opened in Visual Studio, we're debugging
    export IS_DEBUG=true
    scripts/e gen_vs

    # Start goma, since it needs to be running while VS compiles using GN/ninja
    cd "$BASE_PATH/src"
    OUT_DIR="out/$ELECTRON_OUT_DIR"
    export NUMBER_OF_NINJA_PROCESSES=${2:-200}
    export GOMA_START_COMPILER_PROXY=true
    goma.sh start

    # Get the Visual Studio devenv.exe path
    DEV_ENV="$(cygpath "$(/c/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/Installer/vswhere.exe -property productPath -format value)")"

    # Open the generated solution
    "$DEV_ENV" "$OUT_DIR/all.sln"
    ;;
  test)
    GDB_PREFIX=()
    OUT_DIR="out/$ELECTRON_OUT_DIR"
    FLAGS=("${@:2}" --gtest_repeat=1)

    RUN_GN_ONCE=true
    prepare_for_build
    if [ "$UPDATE_LOK" = "true" ]; then rm -rf "$OUT_DIR/libreofficekit"; fi
    autoninja -C "$OUT_DIR" electron/office:office_unittests
    if [ "$IN_GDB" = "true" ]; then GDB_PREFIX=('gdb' '--args'); fi
    if [ "$IN_LLDB" = "true" ]; then
      GDB_PREFIX=(
        'lldb'
        '-o'
        "settings set target.exec-search-paths '$(pwd)/$OUT_DIR' '$(pwd)/third_party/libreofficekit/instdir'"
        '-o'
        "settings set target.source-map ../.. '$(pwd)'"
        '--'
      )
    fi
    if [ "$GEN_CLANGD" = "true" ]; then
      (cd "$BASE_PATH" && "$BASE_PATH/src/tools/clang/scripts/generate_compdb.py" -p "src/$OUT_DIR" > "$BASE_PATH/src/compile_commands.json")
    fi
    "${GDB_PREFIX[@]}" "$OUT_DIR/office_unittests" "${FLAGS[@]}"
    ;;
  coverage)
    OUT_DIR="out/coverage"
    COVERAGE_OUT_DIR="out/coverage-report"
    COVERAGE_OUT_FILE="$COVERAGE_OUT_DIR/coverage.profdata"
    TEST_COVERED="$OUT_DIR/office_unittests"
    GN_EXTRA_ARGS="use_clang_coverage=true"
    COVERAGE_IGNORE='base|gin|skia|third_party|gen|v8|testing|net|crypto|url|ui|mojo|ipc|shell'

    2>/dev/null mkdir -p "src/$OUT_DIR" || true
    2>/dev/null rm -rf "src/${COVERAGE_OUT_DIR:?}" || true
    2>/dev/null mkdir -p "src/$COVERAGE_OUT_DIR" || true

    python3 "$BASE_PATH/src/tools/clang/scripts/update.py" --package=coverage_tools || true
    export PATH="$BASE_PATH/src/third_party/llvm-build/Release+Asserts/bin:$PATH"

    RUN_GN_ONCE=true
    prepare_for_build
    if [ "$UPDATE_LOK" = "true" ]; then rm -rf "$OUT_DIR/libreofficekit"; fi
    autoninja -C "$OUT_DIR" electron/office:office_unittests
    export LLVM_PROFILE_FILE="$COVERAGE_OUT_DIR/office_unittests.%4m.profraw"
    "$TEST_COVERED" "${@:2}" --gtest_repeat=1

    cd "$BASE_PATH/src"
    find "$COVERAGE_OUT_DIR/" -name '*.profraw' -print0 | xargs -0 llvm-profdata merge -o "$COVERAGE_OUT_DIR/coverage.profdata"
    llvm-cov show \
      -show-branches=count \
      -show-regions \
      -output-dir="$COVERAGE_OUT_DIR" \
      -format=html \
      -instr-profile="$COVERAGE_OUT_FILE" \
      -compilation-dir="$OUT_DIR" \
      -path-equivalence="../..,$(cd "$BASE_PATH/src" && pwd -P)" \
      -ignore-filename-regex='^.*electron[/\\]office[/\\]test[/\\].*$' \
      -ignore-filename-regex='.*_unittests?\.cc$' \
      -ignore-filename-regex='.*\.h$' \
      -ignore-filename-regex=".*[/\\]($COVERAGE_IGNORE)[/\\].*" \
      -object="$TEST_COVERED" "$TEST_COVERED"
    if [ -z "$CI" ] && [ "$OS" = "mac" ]; then open "$COVERAGE_OUT_DIR/index.html"; fi
    if [ -z "$CI" ] && [ "$OS" = "linux" ]; then xdg-open "$COVERAGE_OUT_DIR/index.html"; fi
    ;;
esac
